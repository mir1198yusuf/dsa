function Node(item) {
    this.item = item;
    this.next = null;
}

function SinglyLinkedList() {
    this.head = null;
}

SinglyLinkedList.prototype.insertAtStart = function (item) {
    const newNode = new Node(item);
    const currentHead = this.head;
    this.head = newNode;
    this.head.next = currentHead;
};

SinglyLinkedList.prototype.insertAtEnd = function (item) {
    const newNode = new Node(item);
    let lastNode = this.head;
    if (!lastNode) {
        this.head = newNode;
    }
    while (lastNode.next) {
        lastNode = lastNode.next;
    }
    lastNode.next = newNode;
};

SinglyLinkedList.prototype.insertAfterNode = function (item, node) {
    if (!node) {
        console.log('Node does not exist');
    }
    const newNode = new Node(item);
    const currentNext = node.next;
    node.next = newNode;
    newNode.next = currentNext;
};

SinglyLinkedList.prototype.deleteAtStart = function () {
    if (!this.head) {
        console.log('Head is null');
        return;
    }
    const currentNext = this.head.next;
    this.head = currentNext;
};

SinglyLinkedList.prototype.deleteAtEnd = function () {
    let secondLastNode = this.head;
    if (!this.head) {
        console.log('Head is null');
        return;
    }
    if (!secondLastNode.next) {
        this.head = null;
    }
    while (secondLastNode.next.next) {
        secondLastNode = secondLastNode.next;
    }
    secondLastNode.next = null;
};

SinglyLinkedList.prototype.deleteAfterNode = function (node) {
    if (!node) {
        console.log('Node does not exist');
        return;
    }
    const toBeDeletedNode = node.next;
    const newNextNode = toBeDeletedNode?.next;
    node.next = newNextNode;
};

SinglyLinkedList.prototype.traverse = function () {
    let temp = this.head;
    if (!temp) {
        console.log('Head is null');
        return;
    }
    while (temp) {
        console.log(temp.item);
        temp = temp.next;
    }
};

SinglyLinkedList.prototype.search = function (item) {
    let temp = this.head;
    let nodeCount = -1;
    let isFound = false;
    while (temp) {
        nodeCount++;
        if (temp.item === item) {
            isFound = true;
            console.log(`Found at ${nodeCount} node`);
        }
        temp = temp.next;
    }
    if (!isFound) {
        console.log('Not found');
    }
};

SinglyLinkedList.prototype.bubbleSort = function () {
    let i = this.head;
    while (i) {
        let j = i.next;
        while (j) {
            if (i.item > j.item) {
                let t = i.item;
                i.item = j.item;
                j.item = t;
            }
            j = j.next;
        }
        i = i.next;
    }
};

const list = new SinglyLinkedList();

/** all below cases generated by chatgpt */

// Insert elements
list.insertAtStart(1); // Insert 1 at start
list.insertAtEnd(3); // Insert 3 at end
list.insertAtStart(0); // Insert 0 at start, list is now: 0 -> 1 -> 3
list.traverse(); // Output: 0, 1, 3

console.log('===');

// Insert after a specific node
let nodeOne = list.head.next; // Node with item 1
list.insertAfterNode(2, nodeOne); // Insert 2 after node with item 1, list is now: 0 -> 1 -> 2 -> 3
list.traverse(); // Output: 0, 1, 2, 3

console.log('===');

// Delete at start
list.deleteAtStart(); // Remove 0, list is now: 1 -> 2 -> 3
list.traverse(); // Output: 1, 2, 3

console.log('===');

// Delete at end
list.deleteAtEnd(); // Remove 3, list is now: 1 -> 2
list.traverse(); // Output: 1, 2

console.log('===');

// Delete after a specific node
nodeOne = list.head; // Node with item 1
list.deleteAfterNode(nodeOne); // Remove node after 1, list is now: 1
list.traverse(); // Output: 1

console.log('===');

// Search for an item
list.search(1); // Output: Found at 0 node
list.search(2); // Output: Not found

console.log('===');

// Final traverse to see the state of the list
list.traverse(); // Output: 1

console.log('===');

// Sorting
list.insertAtEnd(3);
list.insertAtEnd(2);
list.insertAtEnd(4);
list.insertAtEnd(4);
list.insertAtEnd(5);
list.insertAtEnd(8);
list.insertAtEnd(4);
list.insertAtEnd(0);
list.traverse();
console.log('===');
list.bubbleSort();
list.traverse();
